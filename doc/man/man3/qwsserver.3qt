'\" t
.TH QWSServer 3qt "24 January 2005" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2001 Trolltech AS.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QWSServer \- Server-specific functionality in Qt/Embedded
.br
.PP
\fC#include <qwindowsystem_qws.h>\fR
.PP
Inherits QObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQWSServer\fR ( int " "flags" " = 0, QObject * " "parent" "=0, const char * " "name" "=0 ) "
.br
.ti -1c
.BI "\fB~QWSServer\fR () "
.br
.ti -1c
.BI "enum \fBServerFlags\fR { DisableKeyboard = 0x01, DisableMouse = 0x02 }"
.br
.ti -1c
.BI "enum \fBGUIMode\fR { NoGui = FALSE, NormalGUI = TRUE, Server }"
.br
.ti -1c
.BI "enum \fBIMState\fR { Reserved, IMCompose, IMEnd, IMInternal = 42, IMMarkedText }"
.br
.ti -1c
.BI "enum \fBIMMouse\fR { MousePress, MouseRelease, MouseMove }"
.br
.ti -1c
.BI "void \fBsendIMEvent\fR ( IMState " "state" ", const QString & " "txt" ", int " "cpos" ", int selLen ) (internal)"
.br
.ti -1c
.BI "class KeyboardFilter { public: virtual bool \fBfilter\fR ( int " "unicode" ", int " "keycode" ", int " "modifiers" ", bool " "isPress" ", bool autoRepeat ) "
.br
.ti -1c
.BI "QWSWindow* \fBwindowAt\fR ( const QPoint & pos ) "
.br
.ti -1c
.BI "const QList<QWSWindow>& \fBclientWindows\fR () "
.br
.ti -1c
.BI "void \fBopenMouse\fR () "
.br
.ti -1c
.BI "void \fBcloseMouse\fR () "
.br
.ti -1c
.BI "void \fBopenKeyboard\fR () "
.br
.ti -1c
.BI "void \fBcloseKeyboard\fR () "
.br
.ti -1c
.BI "void \fBrefresh\fR () "
.br
.ti -1c
.BI "void \fBrefresh\fR ( const QRegion & ) "
.br
.ti -1c
.BI "void \fBenablePainting\fR ( bool ) "
.br
.ti -1c
.BI "void \fBsendPropertyNotifyEvent\fR ( int " "property" ", int state ) (internal)"
.br
.ti -1c
.BI "QWSPropertyManager* \fBmanager\fR () "
.br
.ti -1c
.BI "enum \fBWindowEvent\fR { Create=0x0001, Destroy=0x0002, Hide=0x0004, Show=0x0008, Raise=0x0010, Lower=0x0020, Geometry=0x0040, Active=0x0080, Name=0x0100 }"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBwindowEvent\fR ( QWSWindow * " "w" ", QWSServer::WindowEvent e ) "
.br
.ti -1c
.BI "void \fBnewChannel\fR ( const QString & channel ) "
.br
.ti -1c
.BI "void \fBremovedChannel\fR ( const QString & channel ) "
.br
.ti -1c
.BI "void \fBmarkedText\fR ( const QString & ) "
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "void \fBsendKeyEvent\fR ( int " "unicode" ", int " "keycode" ", int " "modifiers" ", bool " "isPress" ", bool autoRepeat ) "
.br
.ti -1c
.BI "void \fBprocessKeyEvent\fR ( int " "unicode" ", int " "keycode" ", int " "modifiers" ", bool " "isPress" ", bool autoRepeat ) (internal)"
.br
.ti -1c
.BI "typedef const KeyMap* \fBkeyMap\fR () "
.br
.ti -1c
.BI "void \fBsetOverrideKeys\fR ( QIntDict<QWSServer::KeyMap> * map ) "
.br
.ti -1c
.BI "void \fBsetKeyboardFilter\fR ( KeyboardFilter * f ) "
.br
.ti -1c
.BI "void \fBsetCurrentInputMethod\fR ( QWSInputMethod * im ) "
.br
.ti -1c
.BI "void \fBresetInputMethod\fR () "
.br
.ti -1c
.BI "void \fBsetMicroFocus\fR ( int " "x" ", int y ) "
.br
.ti -1c
.BI "void \fBrequestMarkedText\fR () (internal)"
.br
.ti -1c
.BI "void \fBsetCurrentGestureMethod\fR ( QWSGestureMethod * im ) (internal)"
.br
.ti -1c
.BI "void \fBresetGestureMethod\fR () (internal)"
.br
.ti -1c
.BI "void \fBsetDefaultMouse\fR ( const char * ) "
.br
.ti -1c
.BI "void \fBsetDefaultKeyboard\fR ( const char * ) "
.br
.ti -1c
.BI "void \fBsetMaxWindowRect\fR ( const QRect & ) "
.br
.ti -1c
.BI "void \fBsendMouseEvent\fR ( const QPoint & " "pos" ", int state ) "
.br
.ti -1c
.BI "void \fBsetDesktopBackground\fR ( const QImage & img ) "
.br
.ti -1c
.BI "void \fBsetDesktopBackground\fR ( const QColor & ) "
.br
.ti -1c
.BI "QWSMouseHandler* \fBmouseHandler\fR () "
.br
.ti -1c
.BI "void \fBsetMouseHandler\fR ( QWSMouseHandler * ) (internal)"
.br
.ti -1c
.BI "QWSKeyboardHandler* \fBkeyboardHandler\fR () "
.br
.ti -1c
.BI "void \fBsetKeyboardHandler\fR ( QWSKeyboardHandler * kh ) "
.br
.ti -1c
.BI "void \fBsetScreenSaver\fR ( QWSScreenSaver * ) (internal)"
.br
.ti -1c
.BI "void \fBsetScreenSaverIntervals\fR ( int * " "ms" ", int eventBlockLevel ) "
.br
.ti -1c
.BI "void \fBsetScreenSaverInterval\fR ( int, int eventBlockLevel ) "
.br
.ti -1c
.BI "void \fBsetScreenSaverIntervals\fR ( int * ms ) "
.br
.ti -1c
.BI "void \fBsetScreenSaverInterval\fR ( int ) "
.br
.ti -1c
.BI "bool \fBscreenSaverActive\fR () "
.br
.ti -1c
.BI "void \fBscreenSaverActivate\fR ( bool ) "
.br
.ti -1c
.BI "void \fBrestartScreenSaverTimer\fR () "
.br
.ti -1c
.BI "void \fBprocessEventQueue\fR () (internal)"
.br
.ti -1c
.BI "QList<QWSInternalWindowInfo>* \fBwindowList\fR () (internal)"
.br
.ti -1c
.BI "void \fBstartup\fR ( int flags ) (internal)"
.br
.ti -1c
.BI "void \fBclosedown\fR () (internal)"
.br
.ti -1c
.BI "void \fBbeginDisplayReconfigure\fR () (internal)"
.br
.ti -1c
.BI "void \fBendDisplayReconfigure\fR () (internal)"
.br
.ti -1c
.BI "void \fBsetCursorVisible\fR ( bool ) "
.br
.ti -1c
.BI "bool \fBisCursorVisible\fR () "
.br
.in -1c
.SH DESCRIPTION
Server-specific functionality in Qt/Embedded
.PP
When you run a Qt/Embedded application, it either runs as a server or connects to an existing server. If it runs as a server, some additional operations are provided via the QWSServer class.
.PP
This class is instantiated by QApplication for Qt/Embedded server processes. You should never construct this class yourself.
.PP
A pointer to the QWSServer instance can be obtained via the global qwsServer variable.
.SS "Member Type Documentation"
.SH "QWSServer::GUIMode"
For internal use only.
.SH "QWSServer::IMMouse"
For internal use only.
.SH "QWSServer::IMState"
This enum type defines the Qt/Embedded Input Method events: 
.TP
\fCIMCompose\fR - an input method has sent composition text.
.TP
\fCIMEnd\fR - an input method has sent accepted text.
.PP
See also QWSInputMethod::sendIMEvent().
.SH "QWSServer::ServerFlags"
For internal use only.
.SH "QWSServer::WindowEvent"
This enum type defines the Qt/Embedded window system events: 
.TP
\fCCreate\fR - a new window has been created.
.TP
\fCDestroy\fR - a window has been destroyed.
.TP
\fCHide\fR - a window has been hidden.
.TP
\fCShow\fR - a window has been shown.
.TP
\fCRaise\fR - a window has been raised.
.TP
\fCLower\fR - a window has been lowered.
.TP
\fCGeometry\fR - the size and/or position of a window has changed.
.TP
\fCActive\fR - a window has become the active window (has keyboard focus).
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QWSServer::QWSServer ( int flags = 0, QObject * parent=0, const char * name=0 )"
Construct a QWSServer class.
.PP
This class is instantiated by QApplication for Qt/Embedded server processes. You should never construct this class yourself.
.SH "QWSServer::~QWSServer ()"
Destruct QWSServer.
.SH "const QList<QWSWindow> & QWSServer::clientWindows ()"
Returns the list of top-level windows. This list will change as applications add and remove wigdets so it should not be stored for future use. The windows are sorted in stacking order from top-most to lowest.
.SH "void QWSServer::closeKeyboard ()"
Closes keyboard device(s).
.SH "void QWSServer::closeMouse ()"
Closes pointer device(s).
.SH "void QWSServer::enablePainting ( bool e )"
Disables all painting on the display.
.SH "bool QWSServer::isCursorVisible () \fC[static]\fR"
Returns TRUE is the cursor is visible, or FALSE if it is hidden.
.PP
See also setCursorVisible().
.SH "QWSKeyboardHandler* QWSServer::keyboardHandler () \fC[static]\fR"
Returns the primary keyboard handler.
.SH "QWSPropertyManager * QWSServer::manager ()"
For internal use only.
.SH "void QWSServer::markedText ( const QString & marked ) \fC[signal]\fR"
For internal use only.
.SH "QWSMouseHandler * QWSServer::mouseHandler () \fC[static]\fR"
Returns the primary mouse handler.
.SH "void QWSServer::newChannel ( const QString & channel ) \fC[signal]\fR"
This signal is emitted when QCopChannel \fIchannel\fR is created.
.SH "void QWSServer::openKeyboard ()"
Open keyboard device(s).
.SH "void QWSServer::openMouse ()"
Opens the mouse device(s).
.SH "void QWSServer::refresh ()"
Refreshes the entire display.
.SH "void QWSServer::refresh ( const QRegion & region )"
Refreshes the display defined by \fIregion.\fR
.SH "void QWSServer::removedChannel ( const QString & channel ) \fC[signal]\fR"
This signal is emitted immediately after the QCopChannel \fIchannel\fR is destroyed. Note that a channel is not destroyed until all listeners have unregistered.
.SH "void QWSServer::resetInputMethod () \fC[static]\fR"
Resets the state of the current input method if one is set and currently in a compose text state.
.PP
If input method doesn't send an accept or reject the compose text will force a reject of compose text.
.SH "void QWSServer::screenSaverActivate ( bool activate ) \fC[static]\fR"
Activates the screensaver immediately if \fCactivate\fR is TRUE otherwise deactivates the screensaver.
.SH "bool QWSServer::screenSaverActive () \fC[static]\fR"
Returns TRUE if the screensaver is active (i.e. blanked).
.SH "void QWSServer::sendKeyEvent ( int unicode, int keycode, int modifiers, bool isPress, bool autoRepeat ) \fC[static]\fR"
Send a key event. You can use this to send key events generated by" virtual keyboards".
.SH "void QWSServer::sendMouseEvent ( const QPoint & pos, int state ) \fC[static]\fR"
Send a mouse event.
.SH "void QWSServer::setCurrentInputMethod ( QWSInputMethod * im ) \fC[static]\fR"
Sets the current QWSInputMethod to \fIim.\fR The current input method is able to filter keys produced by keyboard devices before they are sent to any Qt/Embedded applications. If \fIim\fR is 0 clears the current input method.
.PP
See also resetInputMethod().
.SH "void QWSServer::setCursorVisible ( bool visible ) \fC[static]\fR"
Shows the cursor if \fIvisible\fR is TRUE, otherwise hides the cursor.
.PP
See also isCursorVisible().
.SH "void QWSServer::setDefaultKeyboard ( const char * k ) \fC[static]\fR"
Set the keyboard driver to use if $QWS_KEYBOARD is not defined. The default is platform-dependant.
.SH "void QWSServer::setDefaultMouse ( const char * m ) \fC[static]\fR"
Set the mouse driver to use if $QWS_MOUSE_PROTO is not defined. The default is platform-dependant.
.SH "void QWSServer::setDesktopBackground ( const QColor & c ) \fC[static]\fR"
Sets the color to use as the background in the absence of obscuring windows.
.SH "void QWSServer::setDesktopBackground ( const QImage & img ) \fC[static]\fR"
Sets the image to use as the background in the absence of obscuring windows.
.SH "void QWSServer::setKeyboardFilter ( KeyboardFilter * f ) \fC[static]\fR"
Adds a filter to be invoked for all key events from physical keyboard drivers (events sent via processKeyEvent()).
.PP
The filter is not invoked for keys generated by virtual keyboard drivers (events send via sendKeyEvent()).
.PP
If \fIf\fR is 0, the most-recently added filter is removed and deleted. The caller is responsible for matching each addition with a corresponding removal.
.SH "void QWSServer::setKeyboardHandler ( QWSKeyboardHandler * kh ) \fC[static]\fR"
Sets the primary keyboard handler to \fIkh.\fR
.SH "void QWSServer::setMaxWindowRect ( const QRect & r ) \fC[static]\fR"
Sets the area of the screen which Qt/Embedded application will consider to be the maximum area to use for windows.
.PP
See also QWidget::showMaximized().
.SH "void QWSServer::setOverrideKeys ( QIntDict<QWSServer::KeyMap> * map ) \fC[static]\fR"
Changes the mapping of the keyboard; adding the scancode to Unicode mappings from \fImap.\fR The server takes over ownership of \fImap\fR and will delete it. Use QCollection::setAutoDelete() to control whether the contents of \fImap\fR should be deleted.
.PP
Passing a null pointer for \fImap\fR will revert to the default keymap.
.SH "void QWSServer::setScreenSaverInterval ( int ms ) \fC[static]\fR"
Sets a timeout for the screensaver to a \fIms\fR milliseconds. A setting of zero turns off the screensaver. Events will be blocked at level -1.
.SH "void QWSServer::setScreenSaverInterval ( int ms, int eventBlockLevel ) \fC[static]\fR"
Sets a timeout for the screensaver to a \fIms\fR milliseconds. A setting of zero turns off the screensaver. \fIeventBlockLevel\fR is the level at which events get blocked.
.SH "void QWSServer::setScreenSaverIntervals ( int * ms ) \fC[static]\fR"
Sets an array of timeouts for the screensaver to a list of \fIms\fR milliseconds. A setting of zero turns off the screensaver. The array must be 0-terminated. Events will be blocked at level -1.
.SH "void QWSServer::setScreenSaverIntervals ( int * ms, int eventBlockLevel ) \fC[static]\fR"
Sets an array of timeouts for the screensaver to a list of \fIms\fR milliseconds. A setting of zero turns off the screensaver. The array must be 0-terminated. \fIeventBlockLevel\fR is the level at which events get blocked.
.SH "QWSWindow * QWSServer::windowAt ( const QPoint & pos )"
Returns the window containing the point \fCpos\fR or 0 if there is no window under the point.
.SH "void QWSServer::windowEvent ( QWSWindow * window, QWSServer::WindowEvent event ) \fC[signal]\fR"
This signal is emitted when a window system event \fIevent\fR has been processed for \fIwindow.\fR
.SH "void QWSServer::beginDisplayReconfigure () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::closedown () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::endDisplayReconfigure () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::processEventQueue () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::processKeyEvent ( int unicode, int keycode, int modifiers, bool isPress, bool autoRepeat ) \fC[static]\fR"
For internal use only.
.SH "void QWSServer::requestMarkedText () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::resetGestureMethod () \fC[static]\fR"
For internal use only.
.SH "void QWSServer::sendIMEvent ( QWSServer::IMState state, const QString & txt, int cpos, int selLen )"
For internal use only.
.SH "void QWSServer::sendPropertyNotifyEvent ( int property, int state )"
For internal use only.
.SH "void QWSServer::setCurrentGestureMethod ( QWSGestureMethod * im ) \fC[static]\fR"
For internal use only.
.SH "void QWSServer::setMouseHandler ( QWSMouseHandler * mh ) \fC[static]\fR"
For internal use only.
.SH "void QWSServer::setScreenSaver ( QWSScreenSaver * ss ) \fC[static]\fR"
For internal use only.
.SH "void QWSServer::startup ( int flags ) \fC[static]\fR"
For internal use only.
.SH "QList<QWSInternalWindowInfo> * QWSServer::windowList () \fC[static]\fR"
For internal use only.
.SH "SEE ALSO"
.BR http://doc.trolltech.com/qwsserver.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2001 Trolltech AS, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports make our job much simpler. Thank you.
.P
In case of content or formattting problems with this manual page, please
report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (qwsserver.3qt) and the Qt
version (2.3.10).
