/****************************************************************************
** $Id: qt/doc/qws.doc   2.3.10   edited 2005-01-24 $
**
** Qt/Embedded (Qt on QWS) documentation
**
** Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
**********************************************************************/
/*! \page install-qws.html

\title Installing Qt/Embedded

This installation procedure is written for Linux. It may need
to be modified for other platforms.

<h2>Required packages</h2>

To install and build Qt/Embedded you need several packages. These packages are: 
\code Qt/Embedded \version (or higher, but always a 2.3 version) Qt 2.3.2 for X11 (for emulated desktop development)
tmake 1.13 (or higher) \endcode

Packages for the United States have a different license file. These packages have a "-us" somewhere in the filename, so please use that file instead if it is appropriate to your circumstances. Once installed the package will be in exactly the same place as the "rest of the world" package, it is only the LICENSE file that is different.

In this document we will assume that you have downloaded all packages into ~/dev and are using that as the base directory for the installation and build processes.

<h2>Install the packages</h2>

In this step the required packages are extracted onto your computer and the several enviroment variables are initialized.

<h3>Install TMake</h3>

TMake is used for building Qt/Embedded

\code
cd ~/dev
tar -xzf tmake-1.13.tar.gz
export TMAKEDIR=$PWD/tmake-1.13
\endcode

<h3>Install Qt 2.3.2</h3>

Qt 2.3.2 is required to build tools such as qvfb that are used to simulate an embedded device on your desktop machine. This library is NOT used on the embedded device.

\code
cd ~/dev
tar -xzf qt-x11-2.3.2-commercial.tar.gz
export QT2DIR=$PWD/qt-2.3.2
\endcode


<h3>Install Qt/Embedded</h3>

We assume you have the commercial Qt/Embedded package. If you use the free package 
you should adjust the filenames accordingly.

\code
cd ~/dev
tar -xzf qt-embedded-\version-commercial.tar.gz
export QTEDIR=$PWD/qt-\version
\endcode

You should now have installed all required packages. As long as you have set the environment variables for the other packages correctly you need not worry about them.

IMPORTANT: After you have installed all packages you should have a set of environment
variables that point to each and every package that you installed. These environment 
variables are crucial for building Qt/Embedded, so please verify that they are all correct. 
You should have the following environment variables set:

\code
TMAKEDIR : points to the Tmake tool used for building Qt-Embedded 
QT2DIR : points to the Qt-X11 2.3.2 directory 
QTEDIR : points to the Qt-Embedded \version directory
\endcode

After you have installed all packages you no longer need the tar files. These files 
can be deleted or kept them somewhere safe just in case you decide to reinstall everything from scratch. 


<h2>Compiling Qt/Embedded</h2>

<h3>Build Qt 2.3.2</h3>

To build Qt 2.3.2 you must do the following:

\code
cd $QT2DIR
export TMAKEPATH=$TMAKEDIR/lib/linux-g++
export QTDIR=$QT2DIR
export PATH=$QTDIR/bin:$PATH
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
./configure -no-xft
make
mkdir $QTEDIR/bin
cp bin/uic $QTEDIR/bin/
\endcode

<h3>Build QVfb</h3>

In this step we build and link the qvfb sources from Qt/Embedded \version against the static Qt library from Qt 2.3.2.

\code
export TMAKEPATH=$TMAKEDIR/lib/linux-g++
export QTDIR=$QT2DIR
export PATH=$QTDIR/bin:$PATH
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
cd $QTEDIR/tools/qvfb
tmake -o Makefile qvfb.pro
make
mv qvfb $QTEDIR/bin/
\endcode
 

<h3>Build Qt/Embedded</h3>

To build Qt/Embedded you must do the following:

\code
cd $QTEDIR
export TMAKEPATH=$TMAKEDIR/lib/qws/linux-x86-g++
export QTDIR=$QTEDIR
export PATH=$QTDIR/bin:$PATH
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
./configure -no-xft -qvfb -depths 4,8,16,32 [extra options: see below]
make
\endcode

Extra options:

You may also want to use the configure options <i>-system-jpeg</i> and <i>-gif</i> for jpeg and gif support.

The configuration system is designed to allow platform-specific options to be added, but in general all Linux system which have framebuffer support can use the "linux-generic-g++" platform.

For help on the additional configure options run \e ./configure with \e --help .
 

<h3>Enable Linux framebuffer support</h3>

For application development, we recommend that you use the <a href="qvfb-qws.html">Qt/Embedded virtual framebuffer</a>. But to actually put Qt/Embedded on a device running Linux, you need to ensure that the Linux kernel has framebuffer support.

You may need to recompile your kernel to enable the framebuffer.

Handheld devices running Linux, such as the SL-5000D and the iPAQ, and most other embedded Linux systems that have a graphical display will already have a framebuffer.

This document does not describe how to do this; the <a href=HOWTO-framebuffer.html>HOWTO-Framebuffer page</a> contains a short description. (You should see a penguin logo at boot time when the frame buffer is enabled.)
<ul>
<li>For Matrox G100/G200/G400, use the matrox frame buffer driver.</li>
<li>For NVidia TNT cards, use the nvidia frame buffer driver.</li>
<li>For SciTech Snap cards, use the snap frame buffer driver. For Snap product details see <a href="http://www.scitechsoft.com/">http://www.scitechsoft.com/</a></li>
<li>For using a transformed frame buffer, use the transformed frame buffer driver.</li>
<li>For Mach64 and most other cards, use the vesafb driver.</li>
<li>For Mach64 and most other cards, use the vesafb driver.</li>
<li>For VGA-compatible cards that are not VESA 2.0 compliant, use the VGA16 driver.</li>
</ul>

The frame buffer may also need a boot parameter to be enabled. See <tt>/usr/src/linux/Documentation/fb</tt> for details.

The <tt>fbset</tt> program, which is included in most Linux/x86 distributions, may be used to switch video modes without rebooting the system. The video mode active when the server is started will be used. Note: <tt>fbset</tt> does not work with the vesafb driver.


<h3>Runing the launcher demo</h3>

To run the laucher demo in a real framebuffer:

\code
cd $QTEDIR/examples/launcher
./start_demo
\endcode

To run the launcher demo in a virtual framebuffer :

\code
cd $QTEDIR/examples/launcher
export QTDIR=$QTEDIR
export PATH=$QTEDIR/bin:$PATH
export LD_LIBRARY_PATH=$QTEDIR/lib:$QT2DIR/lib:$LD_LIBRARY_PATH
qvfb -width 640 -height 480 &
sleep 10
./launcher -qws
\endcode

<h3>Creating support for a new device</h3>

It is recommended that a new configration be created for new a target device. It is through configuration files
that compilation tools to use and compilation directives are specified.
Typically this involves: 
<ul>
<li>Identifying the existing suported platform that closest matches your device</li>
<li>Copying the existing configuration files to a new platform name</li>
<li>Customizing the newly created configuation files</li>
</ul>

For example to create a \e linux-myarm-g++ configuration that uses shared libraries firstly:

\code 
cp -r $TMAKEDIR/lib/qws/linux-arm-g++ $TMAKEDIR/lib/qws/linux-myarm-g++
cp -r $QTEDIR/configs/linux-arm-g++-shared $QTEDIR/configs/linux-myarm-g++-shared
\endcode

Then edit \e $TMAKEDIR/lib/qws/linux-myarm-g++ and \e $QTEDIR/configs/linux-myarm-g++-shared choosing the compiler,
linker and changing the compilation directives as needed.


<h3>Building Qt/Embedded for the device</h3>

To build Qt/Embedded for a device, for example \e linux-myarm-g++ , you must do the following:

\code
cd $QTEDIR
export TMAKEPATH=$TMAKEDIR/lib/qws/linux-myarm-g++
export QTDIR=$QTEDIR
export PATH=$QTDIR/bin:$PATH
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
./configure -xplatform linux-myarm-g++ -no-xft -no-qvfb -depths 4,8,16,32 [extra options: see below]
make
\endcode

Extra options:

You may also want to use the configure options \e -system-jpeg and \e -gif for jpeg and gif support.

For help on the additional configure options run \e ./configure with \e --help



<h3>Troubleshooting</h3>

<ul>
<li> Compilation errors refering to freetype/freetype.h:

The most likely cause is that the feature configuration type selected has freetype enabled.
Reconfigure Qt/Embeddeed selecting a smaller feature configration type, for example "large". 

<li>If launcher application does not appear inside QVfb then try removing the old Qt/E temporary data. eg:

\code    
killall qvfb
rm -rf "/tmp/qtembedded-$LOGNAME/"
rm -rf /tmp/qtembedded-0/
\endcode
</li>
<li>Unable to connect to mouse:

To kill gpm, run the following command as root: \code gpm -k \endcode</li>

<li>Applications do not run on real framebuffer:

In some cases, if the server does not work, it will work when run as root. If this happens, there are permissions problems with your filesystem (eg. /dev/fb0 is not writeable by you).

Show processes using the framebuffer: \code fuser -v /dev/fb0 \endcode

Kill such processes: \code fuser -vk /dev/fb0 \endcode

or harsher: \code fuser -k -KILL /dev/fb0 \endcode</li>

<li>Show existing semaphores: \code ipcs \endcode
 
Remove semaphores: \code ipcrm \endcode

The communication between client and QWS server for QWS ID, eg 0, is done through the socket <tt>/tmp/qtembedded-0/.QtEmbedded-0</tt>; sometimes it may need to be deleted. (eg. if you run Qt/Embedded as root then later as an unprivileged user).</li>

</ul>


<h3>Change permissions</h3>

To run Qt/Embedded, you need write access to the framebuffer device <tt>/dev/fb0</tt>.

You also need read access to the mouse device. (Note that <tt>/dev/mouse</tt> is normally a symbolic link; the actual mouse device must be readable.)

<h3>Customization</h3>

The Qt/Embedded library can be reduced in size by <a href=features.html>removing unneeded features</a>.

*/

/*! \page fonts-qws.html

\title Fonts in Qt/Embedded

<h2>Supported formats</h2>

Qt/Embedded supports four font formats:

<ul>
<li><b>TrueType (TTF)</b> - the scalable font technology now standard on MS-Windows and Apple Macintosh, and becoming popular on X11.</li>
<li><b>Postscript Type1 (PFA/PFB)</b> - scalable fonts often used by printers, also popular on X11. These are similar in functionality to TTF fonts and are not discussed further in this document.</li>
<li><b>Bitmap Distribution Format fonts (BDF)</b> - a standard format for non-scalable fonts. A large number of BDF fonts are supplied as part of standard X11 distributions - most of these can be used with Qt/Embedded.</li>
<li><b>Qt Prerendered Font (QPF)</b> - a light-weight non-scalable font format specific to Qt/Embedded.</li>
</ul>

Support for each of these font formats, except QPF which is always enabled, can be enabled or disabled independently by using the <a href=features.html>Qt/Embedded Features Definition</a> There is support in Qt/Embedded for writing a QPF font file from any font, thus you can initially enable TTF and BDF formats, save QPF files for the fonts and sizes you need, then remove TTF and BDF support.

<h2>Memory requirements</h2>

With TTF fonts, each character in the font at a given point size is only rendered when first used in a drawing or metrics operation. With BDF fonts all characters are rendered when the font is used. With QPF fonts, the characters are stored in the same format as Qt uses when drawing.

As an example, a 10-point Times font containing the ASCII characters uses around 1300 bytes when stored in QPF format.

Taking advantage of the way the QPF format is structured, Qt/Embedded memory-maps the data rather than reading and parsing it. This reduces the RAM consumption even further.

The scalable fonts use a larger amount of memory per font, but these fonts can give a memory saving if many different sizes of each font are needed.

<h2>Smooth fonts</h2>

TTF, PFA, and QPF fonts can be rendered as \e smooth anti-aliased fonts to give superior readability, especially on low-resolution devices. The difference between smooth and non-smooth fonts is illustrated below (you may need to change your display to low resolution to see the difference).

<center>
<table>
<tr align="center">
<td><img src="smooth.png">
<td width=10%>
<td><img src="unsmooth.png">
</table>
</center>


In Qt/Embedded 2.2.1, smooth fonts use 8 times as much memory as non-smooth fonts. This multiplier will be reduced to a configurable 2 or 4 (ie. 4-level and 16-level shading rather than the current excessive 256-level shading).

<h2>Unicode</h2>

All fonts used by Qt/Embedded use the Unicode character encoding. Most fonts available today do not actually contain all the Unicode characters, but they do use the Unicode characters ordering. A single \e complete 16-point Unicode font uses over 1Mb of memory.

<h2>The font definition file</h2>

When Qt/Embedded applications run, they look for a file called <tt>$QTDIR/lib/fonts/fontdir</tt> or <tt>/usr/local/qt-embedded/lib/fonts/fontdir</tt>. This file defines the fonts available to the application. It has the following format:

<blockquote>
   <i>name</i> <i>file</i> <i>renderer</i> <i>italic</i> <i>weight</i> <i>size</i> <i>flags</i>
</blockquote>

where:

<blockquote>

<table>
<tr><td valign="top">      <i>name</i> <td> <b>Helvetica</b>, <b>Times</b>, etc.
<tr><td valign="top">      <i>file</i> <td> <b>helvR0810.bdf</b>, <b>verdana.ttf</b>, etc.
<tr><td valign="top">  <i>renderer</i> <td> <b>BDF</b> or <b>FT</b>
<tr><td valign="top">    <i>italic</i> <td> <b>y</b> or <b>n</b>
<tr><td valign="top">    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
<tr><td valign="top">      <i>size</i> <td> <b>0</b> for scalable or 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign="top">     <i>flags</i> <td> Flag characters:<br>
			<b>s</b> = smooth (anti-aliased)<br>
			<b>u</b> = unicode range when saving (default is Latin 1)<br>
			<b>a</b> = ascii range when saving (default is Latin 1)<br>
</table>
</blockquote>


The font definition file does not specify QPF fonts - these are loaded 
directly from the directory containing the <tt>fontdir</tt> file, and must
be named <i>name</i>_<i>size</i>_<i>weight</i><i>italicflag</i>.qpf, where:

<blockquote>

<table>
<tr><td valign="top">      <i>name</i> <td> <b>helvetica</b>, <b>times</b>, etc. (lowercase)
<tr><td valign="top">      <i>size</i> <td> 10 times pointsize (eg. <b>120</b> for 12pt)
<tr><td valign="top">    <i>italicflag</i> <td> <b>i</b> for italic or nothing.
<tr><td valign="top">    <i>weight</i> <td> <b>50</b> is Normal, <b>75</b> is Bold, etc.
</table>
</blockquote>


If an application is run with the <tt>-savefonts</tt> command-line option,
then whenever a font other than a QPF font is used, a corresponding QPF file
is saved. This allows you to easily find the font usage of your applications
and to generate QPF files so that you can eventually reduce the memory
usage of your applications by disabling TTF and BDF support from Qt/Embedded.
option, or by modifying the initialization of <tt>qws_savefonts</tt> in
<tt>kernel/qapplication_qws.cpp</tt> of the Qt/Embedded library source code.
In extreme cases of memory-saving, it is possible to save partially-rendered
fonts (eg. only the characters in "Product Name<sup>TM</sup>") if you are
certain that these are the only characters you will need from the font.
See QMemoryManager::savePrerenderedFont() for this functionality.

<h2>Notes</h2>

The font definition file, naming conventions for font files, and the format
of QPF files may change in versions of Qt/Embedded.


To generate QPF files of different rotations, the program must be re-run with
an orientation that matches the desired rotation of the QPF output. An example to
generate all 4 rotations of fonts would be to run the following at a real framebuffer:
\code
for dpy in LinuxFb Transformed:Rot90 Transformed:Rot180 Transformed:Rot270
do
    QWS_DISPLAY=$dpy ./makeqpf "$@"
done
\endcode
If programs are only ever run in one orientation on a device, only the one
appropriate set of fonts is needed.


When enabled, Qt/Embedded uses the powerful FreeType2 library to implement
TrueType and Type1 support.

<h2>Helvetica BDF Fonts</h2>

<b>The Helvetica BDF font files supplied with Qt/Embedded are distributed under the following highly
permissive license.  We recommend that all Qt/Embedded installations that use these font files also
acknowledge this contribution, and quote this license
statement in an appendix to the documentation.
</b> -- located in <tt>lib/fonts</tt>

Copyright 1984-1989, 1994 Adobe Systems Incorporated.

Copyright 1988, 1994 Digital Equipment Corporation.

Adobe is a trademark of Adobe Systems Incorporated which may be
registered in certain jurisdictions.
Permission to use these trademarks is hereby granted only in
association with the images described in this file.

Permission to use, copy, modify, distribute and sell this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notices appear in all
copies and that both those copyright notices and this permission
notice appear in supporting documentation, and that the names of
Adobe Systems and Digital Equipment Corporation not be used in
advertising or publicity pertaining to distribution of the software
without specific, written prior permission.  Adobe Systems and
Digital Equipment Corporation make no representations about the
suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.


*/

/*! \page running-qws.html

\title Running Qt/Embedded applications

A Qt/Embedded application requires a master application to be running
or to be a master application itself.  The
master application is primarily responsible for managing top-level window
regions, pointer and keyboard input.

Any Qt/Embedded application can be a
master application by constructing the QApplication object with the
<i>QApplication::GuiServer</i> type, or running the application with the
<i>-qws</i> command line option.

This document assumes you have the Linux framebuffer configured correctly
and no master process is running.  If you do not have a working Linux
framebuffer you can use the
<a href="qvfb-qws.html">Qt/Embedded virtual framebuffer</a>.

Change to a Linux console and select an example to run, e.g. examples/widgets.
Make sure $QTDIR is set to the directory where you installed Qt/Embedded
and add the $QTDIR/lib directory to $LD_LIBRARY_PATH, e.g.:
\code
export QTDIR=$HOME/qt-<i>version</i>
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
\endcode

Run the application with the <i>-qws</i> option:

\code
cd $QTDIR/examples/widgets
./widgets -qws
\endcode

You should see the widgets example appear.  If your mouse doesn't work
correctly you need to specify the type of mouse to use.
You can exit the master application at any time using ctrl+alt+backspace.

If you wish to run additional applications you should run them as clients
i.e. without the <i>-qws</i> option.

<h2>Displays</h2>
Qt/Embedded allows multiple displays to be used simultaneously by running
multiple Qt/Embedded master processes.  This is achieved using the -display
command line parameter or the $QWS_DISPLAY environment variable.

The -display parameter's syntax is:

<tt>[gfx driver][:driver specific options][:display number]</tt>

for example if you want to use the mach64 driver on fb1 as display 2:

<tt>$ ./launcher -display Mach64:/dev/fb1:2</tt>

To try this functionality you can do the following:
<ol>
<li>Change to VC 1 and run the launcher:<br>
<tt>$ cd examples/launcher</tt><br>
<tt>$ ./launcher</tt>

<li>Switch to VC 2 and run another one:<br>
<tt>$ cd examples/launcher</tt><br>
<tt>$ ./launcher -display :1</tt>
Another launcher will be started.  Start an application in this launcher.

<li>Press ctrl+alt+F1 - back to display 0.  You can also start additional
applications on a particular display by specifying the display id. Change
to VC 3:<br>
<tt>$ cd examples/widgets</tt><br>
<tt>$ ./widgets -display :1</tt><br>
will display the widgets example on dislpay :1 (VC 2).
</ol>

Only the master process needs to specify the driver/device part explicitly.
The clients get the information they need from the master when they connect.
So once you have a master server running using a particular driver, you can
just use "client -display :n" to use display n.

<h2>Mouse Input</h2>
At the time of writing Qt/Embedded supports MouseMan (default), Microsoft,
IntelliMouse and some other devices specific to certain hardware (e.g. Vr
touch panel).  To specify the mouse to use set the $QWS_MOUSE_PROTO environment
variable, e.g.:
\code
export QWS_MOUSE_PROTO=IntelliMouse
\endcode

See <a href="pointer-qws.html">Qt/Embedded Pointer Handling</a> for more
information.

*/

/*! \page porting-qws.html

\title Porting your applications to Qt/Embedded

Existing Qt applications should require no porting provided there is no
platform dependent code.  Platform dependent code includes system calls,
calls to the underlying window system (Windows or X11), and Qt platform
specific methods such as QApplication::x11EventFilter().

For cases where it is necessary to use platform dependent code there are
macros defined that can be used to enable/disable code for each platform
using #ifdef directives:

<table>
<tr><th>Platform</th><th>Macro</th></tr>
<tr><td>Qt/X11</td><td>Q_WS_X11</td></tr>
<tr><td>Qt/Windows</td><td>Q_WS_WIN</td></tr>
<tr><td>Qt/Embedded</td><td>Q_WS_QWS</td></tr>
</table>

Qt/Embedded also requires the following flags to be defined when compiling
applications:
\code
-DQWS -fno-exceptions -fno-rtti
\endcode

Exceptions and RTTI are disabled in Qt/Embedded because they incur a large
overhead in both size and speed.
*/


/*! \page pointer-qws.html
\title Qt/Embedded Pointer Handling


Pointer handling in Qt/Embedded works for any mouse-like device such as
a touchpanel, a trackball, or real mouse.


In a real device, only a small number of pointer devices (usually one)
would be supported, but for demonstration purposes, Qt/Embedded includes
a large number of supported devices.

<h2>Mouse Protocols</h2>


Qt/Embedded normally auto-detects the mouse type and device if it is one of
the supported types on <tt>/dev/psaux</tt> or one of the <tt>/dev/ttyS?</tt>
serial lines. If multiple mice are detected, all may be used simultaneously.


Alternatively, you may set the environment variable QWS_MOUSE_PROTO to
determine which mouse to use. This environment variable may be set to:
<blockquote>
    <i>&lt;protocol&gt;</i><tt>:</tt><i>&lt;device&gt;</i>
</blockquote>
where <i>&lt;protocol&gt;</i> is one of:
<ul>
 <li>MouseMan
 <li>IntelliMouse
 <li>Microsoft
</ul>
and <i>&lt;device&gt;</i> is the mouse device, often <tt>/dev/mouse</tt>.
If no such variable is specified, the built-in default
is <tt>Auto</tt> which enables auto-detection of the mouse protocol
and device.


To add another protocol, new subclasses of QAutoMouseSubHandler or
QMouseHandler can be written in <tt>kernel/qwsmouse_qws.cpp</tt>.

<h2>Touch Panels</h2>

Qt/Embedded ships with support for the NEC Vr41XX touchpanel
and the iPAQ touchpanel.
These are subclasses of QCalibratedMouseHandler which is in turn
a subclass of QMouseHandler in <tt>kernel/qwsmouse_qws.cpp</tt>.

Writing a custom touch panel handler for Qt/Embedded is not as
hard as the QVrTPanelHandlerPrivate class makes it look.
The Vr41XX touch panel handler is complex; it handles filtering of
noisy input data, and it generates mouse release events by using a
timer. 

Many touch panel devices have a much simpler interface, so a
port to  Qt/Embedded can be written in a few minutes, without expert
knowledge of Qt/Embedded.

The Qt/Embedded release contains an example touch panel handler in the
class QCustomTPanelHandlerPrivate, located in the file
<tt>$QTDIR/src/kernel/qwsmouse_qws.cpp</tt>. It is protected by<tt>#ifdef
QWS_CUSTOMTOUCHPANEL</tt>.

The example reads data from /dev/ts with the following format:
Each packet consists of 5 bytes. 
<ul>
<li>Byte 0 gives status information, in particular, bit 6 (0x40)
is 1 when the stylus is down, 0 if it is released.
<li> Bytes 1 and 2 give the x position;
<li> Bytes 3 and 4 give the y position;
</ul>

To enable this driver, uncomment the line <tt>#define QWS_CUSTOMTOUCHPANEL</tt>
in the file qwsmouse_qws.cpp.

Chances are, your touch panel device will not match exactly the
example device.  As an example, take a hypothetical device located at
/dev/touchpanel. This device uses 6-byte packets. Byte 0 and 1 give
status and pressure information. In particular, bit 5 (0x20) of byte 1
tells whether the stylus is down or up. Bytes 2 and 3 give x position and
bytes 4 and 5 give y position.

Pressure information is not necessary for basic Qt/Embedded operation,
so we will ignore that for now. The following shows the modified touch
panel handler for the hypothetical device, with  comments marked with
<tt>//***<tt> indicating the changes made. You can also see some printf
calls left over from the (hypothetical) debugging.

\code
//*** Modified Trolltech's example handler to handle the
//*** hypothetical touch panel.
QCustomTPanelHandlerPrivate::QCustomTPanelHandlerPrivate( MouseProtocol, QString )
{
    //*** changed device name to /dev/touchpanel

    if ((mouseFD = open( "/dev/touchpanel", O_RDONLY)) < 0) {
        qWarning( "Cannot open /dev/touchpanel (%s)", strerror(errno));
	return;
    } 
    //*** removed the delay since our device does not need it.
    //else {
    //    sleep(1);
    //}

    QSocketNotifier *mouseNotifier;
    mouseNotifier = new QSocketNotifier( mouseFD, QSocketNotifier::Read,
					 this );
    connect(mouseNotifier, SIGNAL(activated(int)),this, SLOT(readMouseData()));
}

QCustomTPanelHandlerPrivate::~QCustomTPanelHandlerPrivate()
{
    if (mouseFD >= 0)
	close(mouseFD);
}

struct CustomTPdata {

  unsigned char status;
  unsigned short xpos;
  unsigned short ypos;

};

void QCustomTPanelHandlerPrivate::readMouseData()
{
    if(!qt_screen)
	return;
    CustomTPdata data;

    //*** changed size to 6 bytes
    unsigned char data2[6];

    int ret;

    //*** read 6 bytes
    ret=read(mouseFD,data2,6);

    if(ret==6) { //*** change to 6
        //*** all the indexes changed:
	data.status=data2[1]; 
	data.xpos=(data2[2] << 8) | data2[3];
	data.ypos=(data2[4] << 8) | data2[5];
	QPoint q;
	q.setX(data.xpos);
	q.setY(data.ypos);
	mousePos=q;
	if(data.status & 0x20) { //*** Changed to 0x20 (bit 5)
          emit mouseChanged(mousePos,Qt::LeftButton);
          //printf( "Stylus press/move %d,%d\n", data.xpos, data.ypos );
	} else {
	  emit mouseChanged(mousePos,0);
          //printf( "Stylus release %d,%d\n", data.xpos, data.ypos );
	}
    }
    if(ret<0) { 
	qDebug("Error %s",strerror(errno));
    }
}
\endcode

Once you have your touch panel handler working, you may choose to keep
it like it is. However, if you want to switch between different
mouse/touch panel devices at run time, you will have to modify
QWSServer::newMouseHandler() (also in qwsmouse_qws.cpp) to instantiate
your new handler(s). You will also need to add to the enum
<tt>MouseProtocol</tt> and the table <tt>mouseConfig[]</tt>. Note that
the precise details on how mouse and touch panel drivers are instantiated
may have to be changed in future versions of Qt/Embedded.

*/


/*! \page performance-qws.html
\title Qt/Embedded Performance Tuning

When building embedded applications on low-powered devices, a number
of options are available that would not be considered in a desktop
application environment. These options reduce the memory and/or CPU
requirements at the cost of other factors.

<ul>
 <li><a href="features.html"><b>Tuning the functionality of Qt</b></a>
 <li><a href="#general">General programming style</a>
 <li><a href="#static">Static vs. Dynamic linking</a>
 <li><a href="#alloc">Alternative memory allocation</a>
</ul>

<a name="general">
<h3>General programming style</h3>
</a>

The following guidelines will improve CPU performance:
<ul>
 <li>Create dialogs and widgets once, then QWidget::hide() and
	QWidget::show() them, rather than creating them and deleting
	them every time they are needed.
	This will use a little more memory, but will be much faster.
	Try to create them the first time "lazily" to avoid slow startup
	(only create the Find dialog the first time the user invokes it).
</ul>

<a name="static">
<h3>Static vs. Dynamic linking</h3>
</a>
Much CPU and memory is used by the ELF linking process. You can make
significant savings by using a static build of your application suite.
This means that rather than having a dynamic library (<tt>libqte.so</tt>)
and a collection of executables which link dynamically to that library,
you build all the applications into a single executable and statically
link that with a static library (<tt>libqt.a</tt>). This improves start-up
time, and reduces memory usage, at the expense of flexibility (to add a new
application, you must recompile the single executable) and robustness (if
one application has a bug, it might harm other applications). If you need
to install end-user applications, this may not be an option, but if you are
building a single application suite for a device with limited CPU power
and memory, this option could be very beneficial.

To compile Qt as a static library, add the <tt>-static</tt> options when
you run configure.

To build your application suite as an all-in-one application, design each
application as a stand-alone widget or set of widgets, with only minimal
code in the <tt>main()</tt> function. Then, write an application that gives
some way to choose among the applications (eg. a QIconView). The
<a href="http://www.trolltech.com/products/qt/embedded/qpe.html">QPE</a>
is an example of this - it can be built either as a set of dynamically-linked
executables, or as a single static application.

Note that you should generally still link dynamically against the standard
C library and any other libraries which might be used by other applications
on your device.

<a name=alloc>
<h3>Alternative memory allocation</h3>
</a>
We have found that the libraries shipped with some C++ compilers on
some platforms have poor performance in the built-in "new" and "delete"
operators. You might gain performance by re-implementing these
functions. For example, you can switch to the plain C allocators
by adding the following to your code:

\code
void* operator new[](size_t size)
{
    return malloc(size);
}

void* operator new(size_t size)
{
    return malloc(size);
}

void operator delete[](void* p)
{
    free(p);
}

void operator delete[](void* p, size_t size)
{
    free(p);
}

void operator delete(void* p)
{
    free(p);
}

void operator delete(void* p, size_t size)
{
    free(p);
}
\endcode
*/

/*! \page arch-qws.html
\title Qt/Embedded Window System Architecture

<h3>Master Process</h3>

Qt/Embedded must have a master process that handles device input
and paintable region management.  Any process may be nominated as the
master process by passing the -qws flag or constructing QApplication as 
the <i>QApplication::GuiServer</i> type.

The master and client Qt/Embedded processes communicate via a PF_LOCAL socket.
There is also a shared memory area that contains the regions of each
top-level widget.

The Qt/Embedded model minimises inter-process communication by performing
as much work as possible in the client process.  For example all drawing
and child widget region operations are performed by the client process
without any communication with the master process necessary.

<h3>Window Management</h3>

The master process maintains the regions that each top-level widget may
paint within.
Performing one of the following operations on a top-level widget causes
the paintable regions of each top-level widget to be updated:
<ul>
<li>show()
<li>hide()
<li>move(), setGeometry(), resize()
<li>raise(), lower()
</ul>
All of the above operations require one round-trip message to the master
process.  Spontaneous expose events are also generated for any widgets
that have some part of their client area exposed by one of the above
operations.

Sub-widget regions are not maintained by the master process, so
performing the above operations on child widgets requires no communication
with the master process.

<h3>Device Input</h3>

The master process is responsible for reading device input and dispatching
the events to the active client.  Key events and mouse/pointer events
can be handled.

<h3>QCop</h3>

The master process controls QCop message delivery.  When a client creates
a QCop <i>channel</i>, the master process adds the client to the list of
clients subscribed to <i>channel</i>.  QCop messages are sent to
the master process which then forwards the messages to each client that
is listening on the channel.

<h3>Painting</h3>

QPainter is essentially a wrapper around the <i>Gfx</i> graphics system.
The QGfx class is a high-level painting abstraction.  Sub-classes implement
the actual drawing functionality, in particular, QGfxRaster implements
painting on a raster device.  Hardware acceleration is usually achieved
by sub-classing QGfxRaster, implementing the accelerated functions where
possible, and falling back to the QGfxRaster implementation for functions
unsupported in hardware.

Qt/Embedded clients paint directly to the framebuffer.  The low-level graphics
system (QGfx) handles clipping against the top-level regions maintained in
shared memory.  No communication with the master process via the socket
is performed.

*/
